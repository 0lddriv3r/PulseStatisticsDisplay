#ifndef AFCommonChart_h__
#define AFCommonChart_h__

#include "AFEventObj.h"
#include "echartsinqt_global.h"
#include "AFCommonChart_Define.h"

struct AFCommonChart_P;

class ECHARTS_COMMON_EXPORT AFCommonChart :public AFEventObj
{
	Q_OBJECT


public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Initializes this object. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void Initialize();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a title. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="title">	The title. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetTitle(const QString & title);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a title color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetTitleColor(const QString & color);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a sub title. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="title">	The title. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetSubTitle(const QString & title);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a sub title color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetSubTitleColor(const QString & color);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a legend. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="Legends">	The legends. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetLegend(const std::vector<QString> & Legends);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a legend label color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetLegendLabelColor(const QString & color);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets an x coordinate axis labels. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="Labels">	The labels. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetXAxisLabels(const std::vector<QString> & Labels);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a y coordinate axis labels. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="Labels">	The labels. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetYAxisLabels(const std::vector<QString> & Labels);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets an e charts background image. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="imagePath">	Full pathname of the image file. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetEChartsBackgroundImage(const QUrl & imagePath);


////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Title. </summary>
///
/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a title text. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="text">	The text. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetTitle_Text(const QString & text );

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a title text style color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetTitle_TextStyle_Color(const QString & color );

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a title sub text. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="text">	The text. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetTitle_SubText(const QString & text);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a title sub text style color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetTitle_SubTextStyle_Color(const QString & color );

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a title sub link./ </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="text">	The text. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetTitle_SubLink(const QString & text);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Color. </summary>
///
/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a background color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void setBackgroundColor_Color(const QString & color);


////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Legend. </summary>
///
/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a legend data simple. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="data">	The data. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetLegend_Data_Simple(const std::vector<QString> & data);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a legend data. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="data">	The data. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetLegend_Data(const std::vector<Option_Legend_DataPtr> & data);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a legend orient. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="orient">	The orient. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetLegend_Orient(const QString & orient);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a legend x coordinate. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="X">	The x coordinate. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetLegend_X(const QString & X);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a legend show. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="isShow">	The is show. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetLegend_Show(const bool & isShow);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a legend text style color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetLegend_TextStyle_Color(const QString & color);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	tooltip. </summary>
///
/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a tooltip trigger. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="trigger">	The trigger. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetTooltip_Trigger(const QString & trigger);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a tooltip axis pointer type. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="Type">	The type. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetTooltip_AxisPointer_Type(const QString & Type);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a tooltip axis pointer label precision. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="percision">	The percision. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetTooltip_AxisPointer_Label_Precision(const QString & percision);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a tooltip formatter. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="formatter">	The formatter. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetTooltip_Formatter(const QString & formatter);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	grid. </summary>
///
/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a grid left. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="Left">	The left. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetGrid_Left(const QString & Left);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a grid right. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="Right">	The right. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetGrid_Right(const QString & Right);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a grid top. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="Top">	The top. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetGrid_Top(const QString & Top);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a grid bottom. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="Bottom">	The bottom. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetGrid_Bottom(const QString & Bottom);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a grid contain label. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="IsContain">	The is contain. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetGrid_ContainLabel(const bool & IsContain);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	xAxis. </summary>
///
/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Setx axis data simple. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="data">	The data. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetxAxis_Data_Simple(const std::vector<QString> & data);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Setx axis type. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="Type">	The type. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetxAxis_Type(const QString & Type);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Setx axis split line show. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="isShow">	The is show. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetxAxis_SplitLine_Show(const bool & isShow);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Setx axis minimum. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="min">	The minimum. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetxAxis_Min(const int & min);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Setx axis minimum. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="min">	The minimum. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetxAxis_Min(const QString & min);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Setx axis line style color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetxAxis_AxisLine_LineStyle_Color(const QString & color);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Setx axis tick line style color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetxAxis_AxisTick_LineStyle_Color(const QString & color);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Setx axis tick align with label. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="value">	The value. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetxAxis_AxisTick_AlignWithLabel(const bool & value);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Setx axis label color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetxAxis_AxisLabel_Color(const QString & color);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Setx axis label formatter. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="formatter">	The formatter. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetxAxis_AxisLabel_Formatter(const QString & formatter);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	yAxis </summary>
///
/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis data simple. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="data">	The data. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_Data_Simple(const std::vector<QString> & data);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis data simple. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">	[in,out] The data object. </param>
	/// <param name="data">   	The data. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_Data_Simple(rapidjson::Value & DataObj, const std::vector<QString> & data);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis type. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="Type">	The type. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_Type(const QString & Type);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis type. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">	[in,out] The data object. </param>
	/// <param name="Type">   	The type. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_Type(rapidjson::Value & DataObj, const QString & Type);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis line style color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_AxisLine_LineStyle_Color(const QString & color);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis line style color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">	[in,out] The data object. </param>
	/// <param name="color">  	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_AxisLine_LineStyle_Color(rapidjson::Value & DataObj, const QString & color);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis tick line style color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_AxisTick_LineStyle_Color(const QString & color);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis tick line style color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">	[in,out] The data object. </param>
	/// <param name="color">  	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_AxisTick_LineStyle_Color(rapidjson::Value & DataObj, const QString & color);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis label color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_AxisLabel_Color(const QString & color);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis label color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">	[in,out] The data object. </param>
	/// <param name="color">  	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_AxisLabel_Color(rapidjson::Value & DataObj, const QString & color);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis split line show. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="isShow">	The is show. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_SplitLine_Show(const bool & isShow);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis split line show. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">	[in,out] The data object. </param>
	/// <param name="isShow"> 	The is show. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_SplitLine_Show(rapidjson::Value & DataObj, const bool & isShow);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis minimum. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="min">	The minimum. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_Min(const int & min);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis minimum. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">	[in,out] The data object. </param>
	/// <param name="min">	  	The minimum. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_Min(rapidjson::Value & DataObj, const int & min);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis minimum. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="min">	The minimum. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_Min(const QString & min);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis minimum. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">	[in,out] The data object. </param>
	/// <param name="min">	  	The minimum. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_Min(rapidjson::Value & DataObj, const QString & min);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis label formatter. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="formatter">	The formatter. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_AxisLabel_Formatter(const QString & formatter);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis label formatter. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">  	[in,out] The data object. </param>
	/// <param name="formatter">	The formatter. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_AxisLabel_Formatter(rapidjson::Value & DataObj, const QString & formatter);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis maximum. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">	[in,out] The data object. </param>
	/// <param name="max">	  	The maximum. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_Max(rapidjson::Value & DataObj, const double & max);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis name. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">	[in,out] The data object. </param>
	/// <param name="name">   	The name. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_Name(rapidjson::Value & DataObj, const QString & name);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis inverse. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">	[in,out] The data object. </param>
	/// <param name="inverse">	The inverse. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_Inverse(rapidjson::Value & DataObj, const bool & inverse);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis name location. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj"> 	[in,out] The data object. </param>
	/// <param name="location">	The location. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_NameLocation(rapidjson::Value & DataObj, const QString & location);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis identifier. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">	[in,out] The data object. </param>
	/// <param name="id">	  	The identifier. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis_Id(rapidjson::Value & DataObj, const QString & id);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sety axis. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObjArray">	[in,out] Array of data objects. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetyAxis(rapidjson::Value & DataObjArray);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Polar </summary>
///
/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the polar null object. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetPolar_NullObj();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a polar center. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="center">	The center. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetPolar_Center(const std::vector<QString> & center);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	RadiusAxis </summary>
///
/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the radius axis null object. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetRadiusAxis_NullObj();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the radius axis minimum. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="min">	The minimum. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetRadiusAxis_Min(const QString & min);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the radius axis maximum. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="max">	The maximum. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetRadiusAxis_Max(const QString & max);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the radius axis split number. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="number">	Number of. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetRadiusAxis_SplitNumber(const QString & number);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the radius axis split number. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="number">	Number of. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetRadiusAxis_SplitNumber(const int & number);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the radius axis line style color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetRadiusAxis_AxisLine_LineStyle_Color(const QString & color);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the radius axis split line style color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetRadiusAxis_SplitLine_LineStyle_Color(const QString & color);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the radius axis pointer line style color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetRadiusAxis_AxisPointer_LineStyle_Color(const QString & color);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the radius axis pointer label color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetRadiusAxis_AxisPointer_Label_Color(const QString & color);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the radius axis pointer label formatter. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="formatter">	The formatter. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetRadiusAxis_AxisPointer_Label_Formatter(const QString & formatter);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the radius axis label formatter. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="formatter">	The formatter. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetRadiusAxis_AxisLabel_Formatter(const QString & formatter);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	AngleAxis </summary>
///
/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets an angle axis type. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="type">	The type. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetAngleAxis_Type(const QString & type);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets an angle axis start angle. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="Angle">	The angle. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetAngleAxis_StartAngle(const QString & Angle);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets an angle axis start angle. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="Angle">	The angle. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetAngleAxis_StartAngle(const int & Angle);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets an angle axis minimum. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="min">	The minimum. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetAngleAxis_Min(const QString & min);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets an angle axis maximum. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="max">	The maximum. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetAngleAxis_Max(const QString & max);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets an angle axis split number. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="number">	Number of. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetAngleAxis_SplitNumber(const QString & number);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets an angle axis split number. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="number">	Number of. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetAngleAxis_SplitNumber(const int & number);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets an angle axis line style color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetAngleAxis_AxisLine_LineStyle_Color(const QString & color);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets an angle axis split line style color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetAngleAxis_SplitLine_LineStyle_Color(const QString & color);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets an angle axis pointer line style color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetAngleAxis_AxisPointer_LineStyle_Color(const QString & color);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets an angle axis pointer label color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetAngleAxis_AxisPointer_Label_Color(const QString & color);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets an angle axis pointer label formatter. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="formatter">	The formatter. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetAngleAxis_AxisPointer_Label_Formatter(const QString & formatter);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets an angle axis label formatter. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="formatter">	The formatter. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetAngleAxis_AxisLabel_Formatter(const QString & formatter);
	
////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	DataZoom. </summary>
///
/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the data zoom inside type. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetDataZoom_Inside_Type();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the data zoom slider type. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetDataZoom_Slider_Type();

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Color. </summary>
///
/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////
	
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a color. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="color">	The color. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetColor(const std::vector<QString> & color);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Series </summary>
///
/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Creates the data object. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <returns>	. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	rapidjson::Value CreateDataObj();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the series name. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">	[in,out] The data object. </param>
	/// <param name="name">   	The name. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetSeries_Name(rapidjson::Value & DataObj,const QString & name);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the series type. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">	[in,out] The data object. </param>
	/// <param name="type">   	The type. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetSeries_Type(rapidjson::Value & DataObj,const QString & type);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the series render item. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">	[in,out] The data object. </param>
	/// <param name="type">   	The type. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetSeries_RenderItem(rapidjson::Value & DataObj,const QString & type);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the series dimensions. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">   	[in,out] The data object. </param>
	/// <param name="dimensions">	The dimensions. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetSeries_Dimensions(rapidjson::Value & DataObj,const std::vector<QString> & dimensions);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the series encode. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">	[in,out] The data object. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetSeries_Encode(rapidjson::Value & DataObj);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the series identifier. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">	[in,out] The data object. </param>
	/// <param name="iD">	  	The d. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetSeries_ID(rapidjson::Value & DataObj,const QString & iD);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the series center. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">	[in,out] The data object. </param>
	/// <param name="pos">	  	The position. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetSeries_Center(rapidjson::Value & DataObj,const std::vector<QString> & pos);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the series y coordinate axis index. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">	[in,out] The data object. </param>
	/// <param name="index">  	Zero-based index of the. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetSeries_yAxisIndex(rapidjson::Value & DataObj, const int & index);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Pushs a data to series. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	///
	/// <param name="DataObj">	[in,out] The data object. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void PushDataToSeries(rapidjson::Value &DataObj);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Updates the series option. </summary>
	///
	/// <remarks>	zhuojiaoshou, 2019/9/11. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void UpdateSeriesOption();

public:
	AFCommonChart(QWidget *parent=0);
	virtual ~AFCommonChart(void);

protected:
	rapidjson::Value _DataValueArray;

private:
	AFCommonChart_P *_p;
};

#endif // AFCommonChart_h__

